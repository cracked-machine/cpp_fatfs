/*----------------------------------------------------------------------------/
/  FatFs - Generic FAT Filesystem Module  R0.14b                              /
/-----------------------------------------------------------------------------/
/
/ Copyright (C) 2021, ChaN, all right reserved.
/
/ FatFs module is an open source software. Redistribution and use of FatFs in
/ source and binary forms, with or without modification, are permitted provided
/ that the following condition is met:
/
/ 1. Redistributions of source code must retain the above copyright notice,
/    this condition and the following disclaimer.
/
/ This software is provided by the copyright holder and contributors "AS IS"
/ and any warranties related to this software are DISCLAIMED.
/ The copyright owner or contributors be NOT LIABLE for any damages caused
/ by use of this software.
/
/----------------------------------------------------------------------------*/


// C++ port of the original source code is subject to MIT License

// Copyright (c) 2022 Chris Sutton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#ifndef __FF_TYPES_HPP__
#define __FF_TYPES_HPP__


#include <ffconf.hpp>		

#include <cstdint>
#include <cctype>
#include <cmath>			
#include <cstring>
#include <memory>
#include <type_traits>

// #if FF_DEFINED != FFCONF_DEF
// #error Wrong configuration file (ffconf.h).
// #endif

namespace fatfs {



#define FF_INTDEF 2
typedef unsigned int	UINT;	/* int must be 16-bit or 32-bit */
typedef unsigned char	BYTE;	/* char must be 8-bit */
typedef uint16_t		WORD;	/* 16-bit unsigned integer */
typedef uint32_t		DWORD;	/* 32-bit unsigned integer */
typedef uint64_t		QWORD;	/* 64-bit unsigned integer */
typedef WORD			WCHAR;	/* UTF-16 character type */

// Type of file size and LBA variables 
#if FF_FS_EXFAT
#if FF_INTDEF != 2
#error exFAT feature wants C99 or later
#endif
typedef QWORD FSIZE_t;
#if FF_LBA64
typedef QWORD LBA_t;
#else
typedef DWORD LBA_t;
#endif
#else
#if FF_LBA64
#error exFAT needs to be enabled when enable 64-bit LBA
#endif
typedef DWORD FSIZE_t;
typedef DWORD LBA_t;
#endif



// Type of path name strings on FatFs API (TCHAR) 
#if FF_USE_LFN && FF_LFN_UNICODE == 1 	/* Unicode in UTF-16 encoding */
typedef WCHAR TCHAR;
#define _T(x) L ## x
#define _TEXT(x) L ## x
#elif FF_USE_LFN && FF_LFN_UNICODE == 2	/* Unicode in UTF-8 encoding */
typedef char TCHAR;
#define _T(x) u8 ## x
#define _TEXT(x) u8 ## x
#elif FF_USE_LFN && FF_LFN_UNICODE == 3	/* Unicode in UTF-32 encoding */
typedef DWORD TCHAR;
#define _T(x) U ## x
#define _TEXT(x) U ## x
#elif FF_USE_LFN && (FF_LFN_UNICODE < 0 || FF_LFN_UNICODE > 3)
#error Wrong FF_LFN_UNICODE setting
#else									/* ANSI/OEM code in SBCS/DBCS */
typedef char TCHAR;
#define _T(x) x
#define _TEXT(x) x
#endif



#if FF_STR_VOLUME_ID
#ifndef FF_VOLUME_STRS
extern const char* VolumeStr[FF_VOLUMES];	/* User defied volume ID */
#endif
#endif




static constexpr uint8_t SZDIRE			  =	32;		/* Size of a directory entry */

/* Filesystem object structure (FATFS) */

typedef struct {
	BYTE	fs_type;		/* Filesystem type (0:not mounted) */
	BYTE	pdrv;			/* Associated physical drive */
	BYTE	n_fats;			/* Number of FATs (1 or 2) */
	BYTE	wflag;			/* win[] flag (b0:dirty) */
	BYTE	fsi_flag;		/* FSINFO flags (b7:disabled, b0:dirty) */
	WORD	id;				/* Volume mount ID */
	WORD	n_rootdir;		/* Number of root directory entries (FAT12/16) */
	WORD	csize;			/* Cluster size [sectors] */
#if FF_MAX_SS != FF_MIN_SS
	WORD	ssize;			/* Sector size (512, 1024, 2048 or 4096) */
#endif
#if FF_USE_LFN
	WCHAR*	lfnbuf;			/* LFN working buffer */
#endif
#if FF_FS_EXFAT
	BYTE*	dirbuf;			/* Directory entry block scratchpad buffer for exFAT */
#endif
#if FF_FS_REENTRANT
	FF_SYNC_t	sobj;		/* Identifier of sync object */
#endif
#if !FF_FS_READONLY
	DWORD	last_clst;		/* Last allocated cluster */
	DWORD	free_clst;		/* Number of free clusters */
#endif
#if FF_FS_RPATH
	DWORD	cdir;			/* Current directory start cluster (0:root) */
#if FF_FS_EXFAT
	DWORD	cdc_scl;		/* Containing directory start cluster (invalid when cdir is 0) */
	DWORD	cdc_size;		/* b31-b8:Size of containing directory, b7-b0: Chain status */
	DWORD	cdc_ofs;		/* Offset in the containing directory (invalid when cdir is 0) */
#endif
#endif
	DWORD	n_fatent;		/* Number of FAT entries (number of clusters + 2) */
	DWORD	fsize;			/* Size of an FAT [sectors] */
	LBA_t	volbase;		/* Volume base sector */
	LBA_t	fatbase;		/* FAT base sector */
	LBA_t	dirbase;		/* Root directory base sector/cluster */
	LBA_t	database;		/* Data base sector */
#if FF_FS_EXFAT
	LBA_t	bitbase;		/* Allocation bitmap base sector */
#endif
	LBA_t	winsect;		/* Current sector appearing in the win[] */
	BYTE	win[FF_MAX_SS];	/* Disk access window for Directory, FAT (and file data at tiny cfg) */
} FATFS;



/* Object ID and allocation information (FFOBJID) */

typedef struct {
	FATFS*	fs;				/* Pointer to the hosting volume of this object */
	WORD	id;				/* Hosting volume mount ID */
	BYTE	attr;			/* Object attribute */
	BYTE	stat;			/* Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched) */
	DWORD	sclust;			/* Object data start cluster (0:no cluster or root directory) */
	FSIZE_t	objsize;		/* Object size (valid when sclust != 0) */
#if FF_FS_EXFAT
	DWORD	n_cont;			/* Size of first fragment - 1 (valid when stat == 3) */
	DWORD	n_frag;			/* Size of last fragment needs to be written to FAT (valid when not zero) */
	DWORD	c_scl;			/* Containing directory start cluster (valid when sclust != 0) */
	DWORD	c_size;			/* b31-b8:Size of containing directory, b7-b0: Chain status (valid when c_scl != 0) */
	DWORD	c_ofs;			/* Offset in the containing directory (valid when file object and sclust != 0) */
#endif
#if FF_FS_LOCK
	UINT	lockid;			/* File lock ID origin from 1 (index of file semaphore table Files[]) */
#endif
} FFOBJID;



/* File object structure (FIL) */

typedef struct {
	FFOBJID	obj;			/* Object identifier (must be the 1st member to detect invalid object pointer) */
	BYTE	flag;			/* File status flags */
	BYTE	err;			/* Abort flag (error code) */
	FSIZE_t	fptr;			/* File read/write pointer (Zeroed on file open) */
	DWORD	clust;			/* Current cluster of fpter (invalid when fptr is 0) */
	LBA_t	sect;			/* Sector number appearing in buf[] (0:invalid) */
#if !FF_FS_READONLY
	LBA_t	dir_sect;		/* Sector number containing the directory entry (not used at exFAT) */
	BYTE*	dir_ptr;		/* Pointer to the directory entry in the win[] (not used at exFAT) */
#endif
#if FF_USE_FASTSEEK
	DWORD*	cltbl;			/* Pointer to the cluster link map table (nulled on open, set by application) */
#endif
#if !FF_FS_TINY
	BYTE	buf[FF_MAX_SS];	/* File private data read/write window */
#endif
} FIL;



/* Directory object structure (DIR) */

typedef struct {
	FFOBJID	obj;			/* Object identifier */
	DWORD	dptr;			/* Current read/write offset */
	DWORD	clust;			/* Current cluster */
	LBA_t	sect;			/* Current sector (0:Read operation has terminated) */
	BYTE*	dir;			/* Pointer to the directory item in the win[] */
	BYTE	fn[12];			/* SFN (in/out) {body[8],ext[3],status[1]} */
#if FF_USE_LFN
	DWORD	blk_ofs;		/* Offset of current entry block being processed (0xFFFFFFFF:Invalid) */
#endif
#if FF_USE_FIND
	const TCHAR* pat;		/* Pointer to the name matching pattern */
#endif
} DIR;



/* File information structure (FILINFO) */

typedef struct {
	FSIZE_t	fsize;			/* File size */
	WORD	fdate;			/* Modified date */
	WORD	ftime;			/* Modified time */
	BYTE	fattrib;		/* File attribute */
#if FF_USE_LFN
	TCHAR	altname[FF_SFN_BUF + 1];/* Altenative file name */
	TCHAR	fname[FF_LFN_BUF + 1];	/* Primary file name */
#else
	TCHAR	fname[12 + 1];	/* File name */
#endif
} FILINFO;



/* Format parameter structure (MKFS_PARM) */

typedef struct {
	BYTE fmt;			/* Format option (FM_FAT, FM_FAT32, FM_EXFAT and FM_SFD) */
	BYTE n_fat;			/* Number of FATs */
	UINT align;			/* Data area alignment (sector) */
	UINT n_root;		/* Number of root directory entries */
	DWORD au_size;		/* Cluster size (byte) */
} MKFS_PARM;



/* File function return code (FRESULT) */

typedef enum {
	FR_OK = 0,				/* (0) Succeeded */
	FR_DISK_ERR,			/* (1) A hard error occurred in the low level disk I/O layer */
	FR_INT_ERR,				/* (2) Assertion failed */
	FR_NOT_READY,			/* (3) The physical drive cannot work */
	FR_NO_FILE,				/* (4) Could not find the file */
	FR_NO_PATH,				/* (5) Could not find the path */
	FR_INVALID_NAME,		/* (6) The path name format is invalid */
	FR_DENIED,				/* (7) Access denied due to prohibited access or directory full */
	FR_EXIST,				/* (8) Access denied due to prohibited access */
	FR_INVALID_OBJECT,		/* (9) The file/directory object is invalid */
	FR_WRITE_PROTECTED,		/* (10) The physical drive is write protected */
	FR_INVALID_DRIVE,		/* (11) The logical drive number is invalid */
	FR_NOT_ENABLED,			/* (12) The volume has no work area */
	FR_NO_FILESYSTEM,		/* (13) There is no valid FAT volume */
	FR_MKFS_ABORTED,		/* (14) The f_mkfs() aborted due to any problem */
	FR_TIMEOUT,				/* (15) Could not get a grant to access the volume within defined period */
	FR_LOCKED,				/* (16) The operation is rejected according to the file sharing policy */
	FR_NOT_ENOUGH_CORE,		/* (17) LFN working buffer could not be allocated */
	FR_TOO_MANY_OPEN_FILES,	/* (18) Number of open files > FF_FS_LOCK */
	FR_INVALID_PARAMETER	/* (19) Given parameter is invalid */
} FRESULT;


/* File lock controls */
#if FF_FS_LOCK != 0
#if FF_FS_READONLY
#error FF_FS_LOCK must be 0 at read-only configuration
#endif
typedef struct {
	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
	DWORD clu;		/* Object ID 2, containing directory (0:root) */
	DWORD ofs;		/* Object ID 3, offset in the directory */
	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
} FILESEM;
#endif

/* Timestamp */
#if FF_FS_NORTC == 1
#if FF_NORTC_YEAR < 1980 || FF_NORTC_YEAR > 2107 || FF_NORTC_MON < 1 || FF_NORTC_MON > 12 || FF_NORTC_MDAY < 1 || FF_NORTC_MDAY > 31
#error Invalid FF_FS_NORTC settings
#endif
#define GET_FATTIME()	((DWORD)(FF_NORTC_YEAR - 1980) << 25 | (DWORD)FF_NORTC_MON << 21 | (DWORD)FF_NORTC_MDAY << 16)
#else
#define GET_FATTIME()	get_fattime()
#endif


/* Definitions of sector size */
#if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_SS != 512 && FF_MAX_SS != 1024 && FF_MAX_SS != 2048 && FF_MAX_SS != 4096) || (FF_MIN_SS != 512 && FF_MIN_SS != 1024 && FF_MIN_SS != 2048 && FF_MIN_SS != 4096)
#error Wrong sector size configuration
#endif
#if FF_MAX_SS == FF_MIN_SS
#define SS(fs)	((UINT)FF_MAX_SS)	/* Fixed sector size */
#else
#define SS(fs)	((fs)->ssize)	/* Variable sector size */
#endif

/* Definitions of logical drive - physical location conversion */
#if FF_MULTI_PARTITION
#define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
#define LD2PT(vol) VolToPart[vol].pt	/* Get partition number (0:auto search, 1..:forced partition number) */
#else
#define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is associated with the same physical drive number */
#define LD2PT(vol) 0			/* Auto partition search */
#endif

#if FF_MULTI_PARTITION		/* Multiple partition configuration */
typedef struct {
	BYTE pd;	/* Physical drive number */
	BYTE pt;	/* Partition: 0:Auto detect, 1-4:Forced partition) */
} PARTITION;

extern PARTITION VolToPart[];	/* Volume - Partition mapping table */
#endif


/* Re-entrancy related */
#if FF_FS_REENTRANT
#if FF_USE_LFN == 1
#error Static LFN work area cannot be used in thread-safe configuration
#endif
#define LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
#else
#define LEAVE_FF(fs, res)	return res
#endif

/* DBCS code range |----- 1st byte -----|  |----------- 2nd byte -----------| */
/*                  <------>    <------>    <------>    <------>    <------>  */
#define TBL_DC932 {0x81, 0x9F, 0xE0, 0xFC, 0x40, 0x7E, 0x80, 0xFC, 0x00, 0x00}
#define TBL_DC936 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0x80, 0xFE, 0x00, 0x00}
#define TBL_DC949 {0x81, 0xFE, 0x00, 0x00, 0x41, 0x5A, 0x61, 0x7A, 0x81, 0xFE}
#define TBL_DC950 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0xA1, 0xFE, 0x00, 0x00}

/* Macros for table definitions */
#define MERGE_2STR(a, b) a ## b
#define MKCVTBL(hd, cp) MERGE_2STR(hd, cp)

/* SBCS up-case tables (\x80-\xFF) */
#define TBL_CT437  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT720  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
					0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT737  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
					0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
					0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT771  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
#define TBL_CT775  {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
					0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
					0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT850  {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
					0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
					0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT852  {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
					0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
					0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
#define TBL_CT855  {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
					0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
					0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
					0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
					0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT857  {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
					0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
					0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT860  {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
					0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
					0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT861  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
					0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
					0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT862  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT863  {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
					0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
					0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT864  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT865  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT866  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
#define TBL_CT869  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
					0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
					0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
					0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}


	/* File access mode and open method flags (3rd argument of f_open) */
	static constexpr uint8_t FA_READ		  =	0x01;
	static constexpr uint8_t FA_WRITE		  =	0x02;
	static constexpr uint8_t FA_OPEN_EXISTING =	0x00;
	static constexpr uint8_t FA_CREATE_NEW	  =	0x04;
	static constexpr uint8_t FA_CREATE_ALWAYS =	0x08;
	static constexpr uint8_t FA_OPEN_ALWAYS	  =	0x10;
	static constexpr uint8_t FA_OPEN_APPEND	  =	0x30;


	/* Fast seek controls (2nd argument of f_lseek) */
	static constexpr QWORD CREATE_LINKMAP	  = ((FSIZE_t)0 - 1);

	/* Format options (2nd argument of f_mkfs) */
	static constexpr uint8_t FM_FAT			  = 0x01;
	static constexpr uint8_t FM_FAT32		  = 0x02;
	static constexpr uint8_t FM_EXFAT		  =	0x04;
	static constexpr uint8_t FM_ANY		      = 0x07;
	static constexpr uint8_t FM_SFD			  = 0x08;	

	/* Limits and boundaries */
	static constexpr uint32_t MAX_DIR 		= 0x200000;			/* Max size of FAT directory */
	static constexpr uint32_t MAX_DIR_EX	= 0x10000000;		/* Max size of exFAT directory */
	static constexpr uint32_t MAX_FAT12		= 0xFF5;			/* Max FAT12 clusters (differs from specs, but right for real DOS/Windows behavior) */
	static constexpr uint32_t MAX_FAT16		= 0xFFF5;			/* Max FAT16 clusters (differs from specs, but right for real DOS/Windows behavior) */
	static constexpr uint32_t MAX_FAT32		= 0x0FFFFFF5;		/* Max FAT32 clusters (not specified, practical limit) */
	static constexpr uint32_t MAX_EXFAT		= 0x7FFFFFFD;		/* Max exFAT clusters (differs from specs, implementation limit) */
	
	/* Additional file access control and file status flags for internal use */
	static constexpr uint8_t FA_SEEKEND		= 0x20;	/* Seek to end of the file on file open */
	static constexpr uint8_t FA_MODIFIED	= 0x40;	/* File has been modified */
	static constexpr uint8_t FA_DIRTY		= 0x80;	/* FIL.buf[] needs to be written-back */	

	/* Additional file attribute bits for internal use */
	static constexpr uint8_t AM_VOL			= 0x08;	/* Volume label */
	static constexpr uint8_t AM_LFN			= 0x0F;	/* LFN entry */
	static constexpr uint8_t AM_MASK		= 0x3F;	/* Mask of defined bits in FAT */
	static constexpr uint8_t AM_MASKX	    = 0x37;	/* Mask of defined bits in exFAT */

	/* Name status flags in fn[11] */
	static constexpr uint8_t NSFLAG			= 11;	/* Index of the name status byte */
	static constexpr uint8_t NS_LOSS		= 0x01;	/* Out of 8.3 format */
	static constexpr uint8_t NS_LFN			= 0x02;	/* Force to create LFN entry */
	static constexpr uint8_t NS_LAST		= 0x04;	/* Last segment */
	static constexpr uint8_t NS_BODY		= 0x08;	/* Lower case flag (body) */
	static constexpr uint8_t NS_EXT			= 0x10;	/* Lower case flag (ext) */
	static constexpr uint8_t NS_DOT			= 0x20;	/* Dot entry */
	static constexpr uint8_t NS_NOLFN		= 0x40;	/* Do not find LFN */
	static constexpr uint8_t NS_NONAME		= 0x80;	/* Not followed */	

	/* exFAT directory entry types */
	static constexpr uint8_t ET_BITMAP		= 0x81;	/* Allocation bitmap */
	static constexpr uint8_t ET_UPCASE		= 0x82;	/* Up-case table */
	static constexpr uint8_t ET_VLABEL		= 0x83;	/* Volume label */
	static constexpr uint8_t ET_FILEDIR		= 0x85;	/* File and directory */
	static constexpr uint8_t ET_STREAM		= 0xC0;	/* Stream extension */
	static constexpr uint8_t ET_FILENAME	= 0xC1;	/* Name extension */	

	/* FatFs refers the FAT structure as simple byte array instead of structure member
	/ because the C structure is not binary compatible between different platforms */

	static constexpr uint8_t BS_JmpBoot		= 0;		/* x86 jump instruction (3-byte) */
	static constexpr uint8_t BS_OEMName		= 3;		/* OEM name (8-byte) */
	static constexpr uint8_t BPB_BytsPerSec	= 11;		/* Sector size [byte] (WORD) */
	static constexpr uint8_t BPB_SecPerClus	= 13;		/* Cluster size [sector] (BYTE) */
	static constexpr uint8_t BPB_RsvdSecCnt	= 14;		/* Size of reserved area [sector] (WORD) */
	static constexpr uint8_t BPB_NumFATs	= 16;		/* Number of FATs (BYTE) */
	static constexpr uint8_t BPB_RootEntCnt	= 17;		/* Size of root directory area for FAT [entry] (WORD) */
	static constexpr uint8_t BPB_TotSec16	= 19;		/* Volume size (16-bit) [sector] (WORD) */
	static constexpr uint8_t BPB_Media		= 21;		/* Media descriptor byte (BYTE) */
	static constexpr uint8_t BPB_FATSz16	= 22;		/* FAT size (16-bit) [sector] (WORD) */
	static constexpr uint8_t BPB_SecPerTrk	= 24;		/* Number of sectors per track for int13h [sector] (WORD) */
	static constexpr uint8_t BPB_NumHeads	= 26;		/* Number of heads for int13h (WORD) */
	static constexpr uint8_t BPB_HiddSec	= 28;		/* Volume offset from top of the drive (DWORD) */
	static constexpr uint8_t BPB_TotSec32	= 32;		/* Volume size (32-bit) [sector] (DWORD) */
	static constexpr uint8_t BS_DrvNum		= 36;		/* Physical drive number for int13h (BYTE) */
	static constexpr uint8_t BS_NTres		= 37;		/* WindowsNT error flag (BYTE) */
	static constexpr uint8_t BS_BootSig		= 38;		/* Extended boot signature (BYTE) */
	static constexpr uint8_t BS_VolID		= 39;		/* Volume serial number (DWORD) */
	static constexpr uint8_t BS_VolLab		= 43;		/* Volume label string (8-byte) */
	static constexpr uint8_t BS_FilSysType	= 54;		/* Filesystem type string (8-byte) */
	static constexpr uint8_t BS_BootCode	= 62;		/* Boot code (448-byte) */
	static constexpr uint16_t BS_55AA		= 510;		/* Signature word (WORD) */	


	static constexpr uint8_t BPB_FATSz32	= 36;		/* FAT32: FAT size [sector] (DWORD) */
	static constexpr uint8_t BPB_ExtFlags32	= 40;		/* FAT32: Extended flags (WORD) */
	static constexpr uint8_t BPB_FSVer32	= 42;		/* FAT32: Filesystem version (WORD) */
	static constexpr uint8_t BPB_RootClus32	= 44;		/* FAT32: Root directory cluster (DWORD) */
	static constexpr uint8_t BPB_FSInfo32	= 48;		/* FAT32: Offset of FSINFO sector (WORD) */
	static constexpr uint8_t BPB_BkBootSec32 = 50;		/* FAT32: Offset of backup boot sector (WORD) */
	static constexpr uint8_t BS_DrvNum32	= 64;		/* FAT32: Physical drive number for int13h (BYTE) */
	static constexpr uint8_t BS_NTres32		= 65;		/* FAT32: Error flag (BYTE) */
	static constexpr uint8_t BS_BootSig32	= 66;		/* FAT32: Extended boot signature (BYTE) */
	static constexpr uint8_t BS_VolID32		= 67;		/* FAT32: Volume serial number (DWORD) */
	static constexpr uint8_t BS_VolLab32	= 71;		/* FAT32: Volume label string (8-byte) */
	static constexpr uint8_t BS_FilSysType32 = 82;		/* FAT32: Filesystem type string (8-byte) */
	static constexpr uint8_t BS_BootCode32	= 90;		/* FAT32: Boot code (420-byte) */

	static constexpr uint8_t BPB_ZeroedEx	= 11;		/* exFAT: MBZ field (53-byte) */
	static constexpr uint8_t BPB_VolOfsEx	= 64;		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
	static constexpr uint8_t BPB_TotSecEx	= 72;		/* exFAT: Volume size [sector] (QWORD) */
	static constexpr uint8_t BPB_FatOfsEx	= 80;		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
	static constexpr uint8_t BPB_FatSzEx	= 84;		/* exFAT: FAT size [sector] (DWORD) */
	static constexpr uint8_t BPB_DataOfsEx	= 88;		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
	static constexpr uint8_t BPB_NumClusEx	= 92;		/* exFAT: Number of clusters (DWORD) */
	static constexpr uint8_t BPB_RootClusEx	= 96;		/* exFAT: Root directory start cluster (DWORD) */
	static constexpr uint8_t BPB_VolIDEx	= 100;		/* exFAT: Volume serial number (DWORD) */
	static constexpr uint8_t BPB_FSVerEx	= 104;		/* exFAT: Filesystem version (WORD) */
	static constexpr uint8_t BPB_VolFlagEx	= 106;		/* exFAT: Volume flags (WORD) */
	static constexpr uint8_t BPB_BytsPerSecEx = 108;		/* exFAT: Log2 of sector size in unit of byte (BYTE) */
	static constexpr uint8_t BPB_SecPerClusEx = 109;		/* exFAT: Log2 of cluster size in unit of sector (BYTE) */
	static constexpr uint8_t BPB_NumFATsEx	  = 110;		/* exFAT: Number of FATs (BYTE) */
	static constexpr uint8_t BPB_DrvNumEx	  = 111;		/* exFAT: Physical drive number for int13h (BYTE) */
	static constexpr uint8_t BPB_PercInUseEx  = 112;		/* exFAT: Percent in use (BYTE) */
	static constexpr uint8_t BPB_RsvdEx		  = 113;		/* exFAT: Reserved (7-byte) */
	static constexpr uint8_t BS_BootCodeEx	  = 120;		/* exFAT: Boot code (390-byte) */

	static constexpr uint8_t DIR_Name		  = 0;		/* Short file name (11-byte) */
	static constexpr uint8_t DIR_Attr		  = 11;		/* Attribute (BYTE) */
	static constexpr uint8_t DIR_NTres		  = 12;		/* Lower case flag (BYTE) */
	static constexpr uint8_t DIR_CrtTime10	  = 13;		/* Created time sub-second (BYTE) */
	static constexpr uint8_t DIR_CrtTime	  = 14;		/* Created time (DWORD) */
	static constexpr uint8_t DIR_LstAccDate	  = 18;		/* Last accessed date (WORD) */
	static constexpr uint8_t DIR_FstClusHI	  = 20;		/* Higher 16-bit of first cluster (WORD) */
	static constexpr uint8_t DIR_ModTime	  = 22;		/* Modified time (DWORD) */
	static constexpr uint8_t DIR_FstClusLO	  = 26;		/* Lower 16-bit of first cluster (WORD) */
	static constexpr uint8_t DIR_FileSize	  = 28;		/* File size (DWORD) */
	static constexpr uint8_t LDIR_Ord		  = 0;		/* LFN: LFN order and LLE flag (BYTE) */
	static constexpr uint8_t LDIR_Attr		  = 11;		/* LFN: LFN attribute (BYTE) */
	static constexpr uint8_t LDIR_Type		  = 12;		/* LFN: Entry type (BYTE) */
	static constexpr uint8_t LDIR_Chksum	  =	13;		/* LFN: Checksum of the SFN (BYTE) */
	static constexpr uint8_t LDIR_FstClusLO	  =	26;		/* LFN: MBZ field (WORD) */
	static constexpr uint8_t XDIR_Type		  = 0;		/* exFAT: Type of exFAT directory entry (BYTE) */
	static constexpr uint8_t XDIR_NumLabel	  =	1;		/* exFAT: Number of volume label characters (BYTE) */
	static constexpr uint8_t XDIR_Label		  =	2;		/* exFAT: Volume label (11-WORD) */
	static constexpr uint8_t XDIR_CaseSum	  =	4;		/* exFAT: Sum of case conversion table (DWORD) */
	static constexpr uint8_t XDIR_NumSec	  = 1;		/* exFAT: Number of secondary entries (BYTE) */
	static constexpr uint8_t XDIR_SetSum	  = 2;		/* exFAT: Sum of the set of directory entries (WORD) */
	static constexpr uint8_t XDIR_Attr		  =	4;		/* exFAT: File attribute (WORD) */
	static constexpr uint8_t XDIR_CrtTime	  =	8;		/* exFAT: Created time (DWORD) */
	static constexpr uint8_t XDIR_ModTime	  =	12;		/* exFAT: Modified time (DWORD) */
	static constexpr uint8_t XDIR_AccTime	  =	16;		/* exFAT: Last accessed time (DWORD) */
	static constexpr uint8_t XDIR_CrtTime10	  =	20;		/* exFAT: Created time subsecond (BYTE) */
	static constexpr uint8_t XDIR_ModTime10	  =	21;		/* exFAT: Modified time subsecond (BYTE) */
	static constexpr uint8_t XDIR_CrtTZ		  =	22;		/* exFAT: Created timezone (BYTE) */
	static constexpr uint8_t XDIR_ModTZ		  =	23;		/* exFAT: Modified timezone (BYTE) */
	static constexpr uint8_t XDIR_AccTZ		  =	24;		/* exFAT: Last accessed timezone (BYTE) */
	static constexpr uint8_t XDIR_GenFlags	  =	33;		/* exFAT: General secondary flags (BYTE) */
	static constexpr uint8_t XDIR_NumName	  =	35;		/* exFAT: Number of file name characters (BYTE) */
	static constexpr uint8_t XDIR_NameHash	  =	36;		/* exFAT: Hash of file name (WORD) */
	static constexpr uint8_t XDIR_ValidFileSize = 40;		/* exFAT: Valid file size (QWORD) */
	static constexpr uint8_t XDIR_FstClus	  =	52;		/* exFAT: First cluster of the file data (DWORD) */
	static constexpr uint8_t XDIR_FileSize	  =	56;		/* exFAT: File/Directory size (QWORD) */


	static constexpr uint8_t DDEM			  =	0xE5;	/* Deleted directory entry mark set to DIR_Name[0] */
	static constexpr uint8_t RDDEM			  =	0x05;	/* Replacement of the character collides with DDEM */
	static constexpr uint8_t LLEF			  =	0x40;	/* Last long entry flag in LDIR_Ord */

	static constexpr uint8_t FSI_LeadSig	  =	0;		/* FAT32 FSI: Leading signature (DWORD) */
	static constexpr uint16_t FSI_StrucSig	  =	484;		/* FAT32 FSI: Structure signature (DWORD) */
	static constexpr uint16_t FSI_Free_Count  = 488;		/* FAT32 FSI: Number of free clusters (DWORD) */
	static constexpr uint16_t FSI_Nxt_Free	  =	492;		/* FAT32 FSI: Last allocated cluster (DWORD) */

	static constexpr uint16_t MBR_Table		  =	446;		/* MBR: Offset of partition table in the MBR */
	static constexpr uint8_t SZ_PTE			  =	16;		/* MBR: Size of a partition table entry */
	static constexpr uint8_t PTE_Boot		  =	0;		/* MBR PTE: Boot indicator */
	static constexpr uint8_t PTE_StHead		  =	1;		/* MBR PTE: Start head */
	static constexpr uint8_t PTE_StSec		  =	2;		/* MBR PTE: Start sector */
	static constexpr uint8_t PTE_StCyl		  =	3;		/* MBR PTE: Start cylinder */
	static constexpr uint8_t PTE_System		  =	4;		/* MBR PTE: System ID */
	static constexpr uint8_t PTE_EdHead		  =	5;		/* MBR PTE: End head */
	static constexpr uint8_t PTE_EdSec		  =	6;		/* MBR PTE: End sector */
	static constexpr uint8_t PTE_EdCyl		  =	7;		/* MBR PTE: End cylinder */
	static constexpr uint8_t PTE_StLba		  =	8;		/* MBR PTE: Start in LBA */
	static constexpr uint8_t PTE_SizLba		  =	12;		/* MBR PTE: Size in LBA */

	static constexpr uint8_t GPTH_Sign		  =	0;		/* GPT: Header signature (8-byte) */
	static constexpr uint8_t GPTH_Rev		  =	8;		/* GPT: Revision (DWORD) */
	static constexpr uint8_t GPTH_Size		  =	12;		/* GPT: Header size (DWORD) */
	static constexpr uint8_t GPTH_Bcc		  =	16;		/* GPT: Header BCC (DWORD) */
	static constexpr uint8_t GPTH_CurLba	  =	24;		/* GPT: Main header LBA (QWORD) */
	static constexpr uint8_t GPTH_BakLba	  = 32;		/* GPT: Backup header LBA (QWORD) */
	static constexpr uint8_t GPTH_FstLba	  = 40;		/* GPT: First LBA for partitions (QWORD) */
	static constexpr uint8_t GPTH_LstLba	  =	48;		/* GPT: Last LBA for partitions (QWORD) */
	static constexpr uint8_t GPTH_DskGuid	  =	56;		/* GPT: Disk GUID (16-byte) */
	static constexpr uint8_t GPTH_PtOfs		  =	72;		/* GPT: Partation table LBA (QWORD) */
	static constexpr uint8_t GPTH_PtNum		  =	80;		/* GPT: Number of table entries (DWORD) */
	static constexpr uint8_t GPTH_PteSize	  =	84;		/* GPT: Size of table entry (DWORD) */
	static constexpr uint8_t GPTH_PtBcc		  =	88;		/* GPT: Partation table BCC (DWORD) */
	static constexpr uint8_t SZ_GPTE		  = 128;		/* GPT: Size of partition table entry */
	static constexpr uint8_t GPTE_PtGuid	  = 0;		/* GPT PTE: Partition type GUID (16-byte) */
	static constexpr uint8_t GPTE_UpGuid	  =	16;		/* GPT PTE: Partition unique GUID (16-byte) */
	static constexpr uint8_t GPTE_FstLba	  =	32;		/* GPT PTE: First LBA (QWORD) */
	static constexpr uint8_t GPTE_LstLba	  =	40;		/* GPT PTE: Last LBA inclusive (QWORD) */
	static constexpr uint8_t GPTE_Flags		  =	48;		/* GPT PTE: Flags (QWORD) */
	static constexpr uint8_t GPTE_Name		  =	56;		/* GPT PTE: Name */	

	/*--------------------------------------------------------------*/
	/* Flags and offset address                                     */



	/* Filesystem type (FATFS.fs_type) */
	static constexpr uint8_t FS_FAT12		  = 1;
	static constexpr uint8_t FS_FAT16		  = 2;
	static constexpr uint8_t FS_FAT32		  = 3;
	static constexpr uint8_t FS_EXFAT		  = 4;

	/* File attribute bits for directory entry (FILINFO.fattrib) */
	static constexpr uint8_t AM_RDO			  = 0x01;	/* Read only */
	static constexpr uint8_t AM_HID			  = 0x02;	/* Hidden */
	static constexpr uint8_t AM_SYS			  = 0x04;	/* System */
	static constexpr uint8_t AM_DIR			  = 0x10;	/* Directory */
	static constexpr uint8_t AM_ARC	          = 0x20;	/* Archive */	


/*--------------------------------*/
/* Code conversion tables         */
/*--------------------------------*/

#if FF_CODE_PAGE == 0	/* Run-time code page configuration */
#define CODEPAGE CodePage
static WORD CodePage;	/* Current code page */
static const BYTE *ExCvt, *DbcTbl;	/* Pointer to current SBCS up-case table and DBCS code range table below */

static const BYTE Ct437[] = TBL_CT437;
static const BYTE Ct720[] = TBL_CT720;
static const BYTE Ct737[] = TBL_CT737;
static const BYTE Ct771[] = TBL_CT771;
static const BYTE Ct775[] = TBL_CT775;
static const BYTE Ct850[] = TBL_CT850;
static const BYTE Ct852[] = TBL_CT852;
static const BYTE Ct855[] = TBL_CT855;
static const BYTE Ct857[] = TBL_CT857;
static const BYTE Ct860[] = TBL_CT860;
static const BYTE Ct861[] = TBL_CT861;
static const BYTE Ct862[] = TBL_CT862;
static const BYTE Ct863[] = TBL_CT863;
static const BYTE Ct864[] = TBL_CT864;
static const BYTE Ct865[] = TBL_CT865;
static const BYTE Ct866[] = TBL_CT866;
static const BYTE Ct869[] = TBL_CT869;
static const BYTE Dc932[] = TBL_DC932;
static const BYTE Dc936[] = TBL_DC936;
static const BYTE Dc949[] = TBL_DC949;
static const BYTE Dc950[] = TBL_DC950;

#elif FF_CODE_PAGE < 900	/* Static code page configuration (SBCS) */
#define CODEPAGE FF_CODE_PAGE
static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CODE_PAGE);

#else					/* Static code page configuration (DBCS) */
#define CODEPAGE FF_CODE_PAGE
static const BYTE DbcTbl[] = MKCVTBL(TBL_DC, FF_CODE_PAGE);

#endif


} // namespace fatfs

#endif // __FF_TYPES_HPP__